% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trans.R
\name{transfer}
\alias{transfer}
\title{Transductive inference for (generalized) linear models}
\usage{
transfer(
  object,
  df.new,
  df.cond.new = NULL,
  param = NULL,
  wts = NULL,
  alg = "loess",
  random.seed = NULL,
  other.params = NULL,
  folds = NULL,
  verbose = TRUE
)
}
\arguments{
\item{object}{An lm() or glm() object that fits the original regression}

\item{df.new}{Dataframe for covariate shift attributes for the new population}

\item{df.cond.new}{Dataframe for the new conditioning set; default to be df.new if not provided; can be a subset of df.new}

\item{param}{The coefficients to conduct transductive inference; default to be all the original coefficients in mdl if not provided; can be a mixture of string names and integer indices}

\item{wts}{Optional, pre-specified covariate shift (weights); if not given, we automatically fit using grf package}

\item{alg}{Optional, a string for name of algorithm in fitting the conditional mean of influence functions, current options include `loess` and `grf`}

\item{random.seed}{Optional, random seed for sample splitting}

\item{other.params}{Optional, a list of other parameters for the regression algorithm; can include span and degree for loess}

\item{folds}{Optional, a list of two folds of indices for sample splitting; can be useful to control sample splitting}

\item{verbose}{Optimal, TRUE by default; print the summary if verbose==TRUE}
}
\value{
Point transductive estimator, standard errors and p-values for transductive inference, conditional confidence intervals for the new conditional parameters, standard errors and p-values for super-population parameter
}
\description{
Implement the transductive inference procedure for (weighted) linear and generalized linear regression, wrapping around an lm() or glm() object
}
\examples{
X = matrix(rnorm(1000*10), nrow=1000)
Y = X \%*\% matrix(c(1,2,3,rep(0,10-3)), ncol=1) + rnorm(1000) * 0.1 
dat = data.frame(cbind(Y, data.frame(X)))
colnames(dat)[1] = "Y"
lm.mdl = lm(Y~., data = dat)
new.Z = data.frame(matrix(runif(500*2), nrow=500)*2-1) 
colnames(new.Z) = c("X1", "X2")
transfer(lm.mdl, df.new=new.Z)
transfer(lm.mdl, df.new=new.Z, param=c(1,"X1","X2")) 

}
